% Build the stan command line
% note how init is handled for multiple chains
% https://groups.google.com/forum/?fromgroups#!searchin/stan-users/command$20line/stan-users/2YNalzIGgEs/NbbDsM9R9PMJ
% bash script for stan
% https://groups.google.com/forum/?fromgroups#!topic/stan-dev/awcXvXxIfHg

% Call stan for a model in the cloud? For parallel jobs, but we have to
% figure out how to compile? command line does not accept http, so have to
% write locally

% Notes
%Initial version is a wrapper for stan cmd-line.
classdef stan < handle
   properties(GetAccess = public, SetAccess = public)
      stanHome = '/Users/brian/Downloads/stan-2.0.1';
   end
   properties(GetAccess = public, SetAccess = private)
      modelHome % url or path to .stan file
   end
   properties(GetAccess = public, SetAccess = public)
      model % name of .stan file
      modelCode

      workingDir

      method
      data % need to handle matrix versus filename, should have a callback

      % Expose the same parameters as Rstan and Pystan
      % quick access, use a setter to place these into struct
      chains
      refresh
      output
     
      id 
      iter %
      warmup
      thin
      init
      seed      

      modelCodeOverwrite = false;
   end
   
   properties(GetAccess = public, SetAccess = private, Dependent = true, Transient = true)
      
      % currently, only only those parameters in command-line stan are
      % included here, others, which may be relevant, are above?
%      id 
      
      command
   end
   
   properties(GetAccess = public, SetAccess = private)
      % eventually private
      params
      defaults
      validators
      processes % processManager
      data_ % filename for file autogenerated from data
      %output_ % filename for samples
   end

   methods
      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      %% Constructor      
      function self = stan(varargin)
         [self.defaults,self.validators] = self.stanParams();
         self.params = self.defaults;
         self.workingDir = pwd;

         p = inputParser;
         p.KeepUnmatched= true;
         p.FunctionName = 'stan constructor';
         p.addParamValue('stanHome',self.stanHome);
         p.addParamValue('model','');
         p.addParamValue('modelCode',{});
         p.addParamValue('workingDir',pwd);
         p.addParamValue('method','sample',@(x) validatestring(x,{'sample' 'optimize' 'diagnose'}));
         p.addParamValue('chains',4);
         p.addParamValue('output','',@ischar);
         p.addParamValue('refresh',self.defaults.output.refresh,@isnumeric);
         p.parse(varargin{:});

         self.stanHome = p.Results.stanHome;
         self.model = p.Results.model;
         self.modelCode = p.Results.modelCode;
         self.workingDir = p.Results.workingDir;
         
         self.method = p.Results.method;
         self.chains = p.Results.chains;
         
         self.refresh = p.Results.refresh;
         if isempty(p.Results.output)
            self.output = self.params.output.file;
         else
            self.output = p.Results.outout;
            self.params.output.file = self.output;
         end
         
         % pass remaining inputs to set()
         self.set(p.Unmatched);
      end
      
      function set.stanHome(self,d)
         %d = fileparts(d);
         [~,fa] = fileattrib(d);
         if fa.directory
            if exist(fullfile(fa.Name,'makefile'),'file') && exist(fullfile(fa.Name,'bin'),'dir')
               self.stanHome = fa.Name;
            else
               error('Does not look like a proper stan setup');
            end
         else
            error('stanHome should be the base directory name for stan');
         end
      end
            
      function set.model(self,model)
         if ischar(model)
            % filename, may need to strip of .stan extension?
            if (exist(model,'file')==2) || strncmp(model,'http',4)
               [filepath,filename,fileext] = fileparts(model);
            elseif exist([model '.stan'],'file')==2
               [filepath,filename,fileext] = fileparts(model);
            else               
               % File does not exist, but could be the name for a model 
               % defined by modelCode
               [filepath,filename,fileext] = fileparts(model);
            end
         else
            error('model should be a filename');
         end
         if isempty(filepath)
            self.modelHome = pwd;
         else
            if ~strcmp(self.modelHome,filepath)
               fprintf('New modelHome set.\n');
            end
            self.modelHome = filepath;
            % check that existing modelHome clashes?
         end
         % Looks like model must exist with extension .stan, but compiling
         % requires passing the name without extension?
         self.model = filename;
         % trigger reread of modelStr
      end
      
      function set.modelCode(self,model)
         if isempty(model)
            return;
         end
         if ischar(model)
            model = regexp(model,'(\r\n|\n|\r)','split')';
         end
         if any(strncmp('data',model,4)) || any(strncmp('parameters',model,10)) || any(strncmp('model',model,5))
            % A model string, assuming model is a cell array of strings            
            if exist(fullfile(self.modelHome,[self.model '.stan']),'file') == 2
               % Model file already exists
               if self.modelCodeOverwrite
                  self.writeTextFile(fullfile(self.modelHome,[self.model '.stan']),model);
               else
                  [filename,filepath] = uiputfile('*.stan');
                  self.model = fullfile(filepath,filename);
                  self.writeTextFile(fullfile(self.modelHome,[self.model '.stan']),model);
               end
            else
               self.writeTextFile(fullfile(self.modelHome,[self.model '.stan']),model);
            end
         else
            error('does not look like a stan model');
         end
      end
      
      function modelCode = get.modelCode(self)
         % Always reread file? Or checksum?
         try
            if ~strncmp(self.modelHome,'http',4)
               str = urlread(['file:///' fullfile(self.modelHome,[self.model '.stan'])]);
            else
               str = urlread(fullfile(self.modelHome,[self.model '.stan']));
            end
            modelCode = regexp(str,'(\r\n|\n|\r)','split')';
         catch err
            if strcmp(err.identifier,'MATLAB:urlread:ConnectionFailed')
               %fprintf('File does not exist\n');
               modelCode = {};
            else
               rethrow(err);
            end
         end
      end
      
      function set.workingDir(self,d)
         d = fileparts(d);
         [~,fa] = fileattrib(d);
         if fa.directory && fa.UserWrite && fa.UserRead
            self.workingDir = fa.Name;
         else
            self.workingDir = tempdir;
         end
      end
            
      function set.chains(self,nChains)
         if (nChains>java.lang.Runtime.getRuntime.availableProcessors) || (nChains<1)
            error('bad # of chains');
         end
         nChains = min(java.lang.Runtime.getRuntime.availableProcessors,max(1,round(nChains)));
         self.chains = nChains;
      end
      
      function set.refresh(self,refresh)
         % reasonable default
         self.refresh = refresh;
      end
      
      function set.id(self,id)
         validateattributes(id,self.validators.id{1},self.validators.id{2})
         self.params.id = id;
      end
      function id = get.id(self)
         id = self.params.id;
      end
      function set.iter(self,iter)
         validateattributes(iter,self.validators.sample.num_samples{1},self.validators.sample.num_samples{2})
         self.params.sample.num_samples = iter;
      end
      function iter = get.iter(self)
         iter = self.params.sample.num_samples;
      end
      function set.warmup(self,warmup)
         validateattributes(warmup,self.validators.sample.num_warmup{1},self.validators.sample.num_warmup{2})
         self.params.sample.num_warmup = warmup;
      end
      function warmup = get.warmup(self)
         warmup = self.params.sample.num_warmup;
      end
      function set.thin(self,thin)
         validateattributes(thin,self.validators.sample.thin{1},self.validators.sample.thin{2})
         self.params.sample.thin = thin;
      end
      function thin = get.thin(self)
         thin = self.params.sample.thin;
      end
      function set.init(self,init)
         % handle vector case
         validateattributes(init,self.validators.init{1},self.validators.init{2})
         self.params.init = init;
      end
      function init = get.init(self)
         init = self.params.init;
      end
      function set.seed(self,seed)
         % handle chains > 1
         validateattributes(seed,self.validators.random.seed{1},self.validators.random.seed{2})
         self.params.random.seed = seed;
      end
      function seed = get.seed(self)
         seed = self.params.random.seed;
      end
      
      function set(self,varargin)
         p = inputParser;
         p.KeepUnmatched= false;
         p.FunctionName = 'stan parameter setter';
         p.addParamValue('id',self.id);
         p.addParamValue('iter',self.iter);
         p.addParamValue('warmup',self.warmup);
         p.addParamValue('thin',self.thin);
         p.addParamValue('init',self.init);
         p.addParamValue('seed',self.seed);
         p.addParamValue('data',[],@(x) isstruct(x) || isstr(x));
         p.parse(varargin{:});
% 
%          va = @validateattributes;
%          d = self.defaults;
%          d = self.params;
%          v = self.validators;
%          p = inputParser;
%          p.KeepUnmatched= false;
%          p.FunctionName = 'stan parameter setter';
%          p.addParamValue('id',d.id,@(x) va(x,v.id{1},v.id{2}));
%          p.addParamValue('iter',d.sample.num_samples,@(x) va(x,v.sample.num_samples{1},v.sample.num_samples{2}));
%          p.addParamValue('warmup',d.sample.num_warmup,@(x) va(x,v.sample.num_warmup{1},v.sample.num_warmup{2}));
%          p.addParamValue('thin',d.sample.thin,@(x) va(x,v.sample.thin{1},v.sample.thin{2}));
%          p.addParamValue('init',d.init,@(x) va(x,v.init{1},v.init{2}));
%          p.addParamValue('seed',d.random.seed,@(x) va(x,v.random.seed{1},v.random.seed{2}));
%          %p.addParamValue('data',d.data.file,v.data.file);
%          p.addParamValue('data',[],@(x) isstruct(x) || isstr(x));
%          p.parse(varargin{:});

         self.id = p.Results.id;
         self.iter = p.Results.iter;
         self.warmup = p.Results.warmup;
         self.thin = p.Results.thin;
         self.init = p.Results.init;
         self.seed = p.Results.seed;

         if isstruct(p.Results.data)
            % rdump()
         elseif ischar(p.Results.data)
            % name of data file
            % read data into struct... what a mess...            
            % self.data = dump2struct()
            self.data = 'from file';
            % store filename in self.data_
            self.data_ = p.Results.data;
            % insert filename into params.data.file
            self.params.data.file = self.data_;
         else
            
         end
      end
      
      
      function command = get.command(self)
         % add a prefix and postfix property according to os?
         % Maybe better to use full paths to file
         command = {[fullfile(self.modelHome,self.model) ' ']};
         %command = {['./' self.model ' ']};
         str = parseParams(self.params,self.method);
         command = cat(1,command,str);
      end
      
      function sample(self)
         % alias to run
      end
      function optimize(self)
         
      end
      function diagnose(self)
      end
      
      function fit = run(self)
         fprintf('Stan is ');
         if strcmp(self.method,'sample')
            fprintf('sampling with %g chains...\n',self.chains);
         end
         
         cmd = self.command;
         ind = strncmp(cmd,['file=' self.output],5+length(self.output));
         [path,name] = fileparts(self.output);
         for i = 1:self.chains
            % Each chain written to separate file
            output{i} = [name '-' num2str(i) '.csv'];
            cmd{ind} = ['file=' output{i} ' '];
            command = sprintf('%s',cmd{:});
            % Manage the RNG seed
            % https://groups.google.com/forum/#!msg/stan-users/3goteHAsJGs/nRiOhi9xxqEJ
            % https://groups.google.com/forum/#!searchin/stan-dev/seed/stan-dev/C8xa0hiSWLY/W6JC_35T1woJ
            p(i) = processManager('id',output{i},'command',command,...
                               'workingDir',self.modelHome,...
                               'wrap',100,...
                               'keepStdout',false,...
                               'pollInterval',1,...
                               'printStdout',true);
         end
         self.processes = p;
%          command = sprintf('%s',self.command{:});
%             self.processes = processManager('id','stan','command',command,...
%                                'workingDir',self.modelPath,...
%                                'wrap',100,...
%                                'keepStdout',false,...
%                                'pollInterval',1,...
%                                'printStdout',true);
         if nargout == 1
            fit = stanFit('processes',self.processes,'output',output);
%             fit = stanFit(self.processes);
%             fit.output = output;
         end
      end
      
      
      function help(self,str)
         % if str is stanc or other basic binary
         
         %else
         % need to check that model binary exists
         command = [fullfile(self.modelHome,self.model) ' ' str ' help'];
         p = processManager('id','stan help','command',command,...
                            'workingDir',self.modelHome,...
                            'wrap',100,...
                            'keepStdout',true,...
                            'printStdout',false);
         p.block(0.05);
         if p.exitValue == 0
            % Trim off the boilerplate
            ind = find(strncmp('Usage: ',p.stdout,7));
            fprintf('%s\n',p.stdout{1:ind-1});
         else
            fprintf('%s\n',p.stdout{:});
         end
      end
      
      function compile(self,target)
         if any(strcmp({'stanc' 'libstan.a' 'libstanc.a' 'print'},target))
            command = ['make bin/' target];
            printStderr = false;
         elseif strcmp(target,'model')
            command = ['make ' fullfile(self.modelHome,self.model)];
            printStderr = true;
         else
            error('Unknown target');
         end
         p = processManager('id','compile',...
                            'command',command,...
                            'workingDir',self.stanHome,...
                            'printStderr',printStderr,...
                            'keepStderr',true,...
                            'keepStdout',true);
         p.block(0.05);
      end
   end

   methods(Static)
      function [params,valid] = stanParams()
         % Default Stan parameters and validators. Should only contain
         % parameters that are valid inputs to Stan cmd-line!
         % validator can be
         % 1) function handle
         % 2) 1x2 cell array of cells, input to validateattributes first element is classes,
         % second is attributes
         % 3) cell array of strings representing valid arguments
         params.sample = struct(...
                               'num_samples',1000,...
                               'num_warmup',1000,...
                               'save_warmup',false,...
                               'thin',1,...
                               'adapt',struct(...
                                              'engaged',true,...
                                              'gamma',0.05,...
                                              'delta',0.65,...
                                              'kappa',0.75,...
                                              't0',10),...
                               'algorithm','hmc',...
                               'hmc',struct(...
                                            'engine','nuts',...
                                            'static',struct('int_time',2*pi),...
                                            'nuts',struct('max_depth',10),...
                                            'metric','diag_e',...
                                            'stepsize',1,...
                                            'stepsize_jitter',0));
         valid.sample = struct(...
                               'num_samples',{{{'numeric'} {'scalar','>=',0}}},...
                               'num_warmup',{{{'numeric'} {'scalar','>=',0}}},...
                               'save_warmup',{{{'logical'} {'scalar'}}},...
                               'thin',{{{'numeric'} {'scalar','>',0}}},...
                               'adapt',struct(...
                                              'engaged',{{{'logical'} {'scalar'}}},...
                                              'gamma',{{{'numeric'} {'scalar','>',0}}},...
                                              'delta',{{{'numeric'} {'scalar','>',0}}},...
                                              'kappa',{{{'numeric'} {'scalar','>',0}}},...
                                              't0',{{{'numeric'} {'scalar','>',0}}}),...
                               'algorithm',{{'hmc'}},...
                               'hmc',struct(...
                                            'engine',{{'static' 'nuts'}},...
                                            'static',struct('int_time',{{{'numeric'} {'scalar','>',0}}}),...
                                            'nuts',struct('max_depth',{{{'numeric'} {'scalar','>',0}}}),...
                                            'metric',{{'unit_e' 'diag_e' 'dense_e'}},...
                                            'stepsize',1,...
                                            'stepsize_jitter',0));

         params.optimize = struct(...
                                 'algorithm','bfgs',...
                                 'nesterov',struct(...
                                                   'stepsize',1),...
                                 'bfgs',struct(...
                                               'init_alpha',0.001,...
                                               'tol_obj',1e-8,...
                                               'tol_grad',1e-8,...
                                               'tol_param',1e-8),...
                                 'iter',2000,...
                                 'save_iterations',false);

         valid.optimize = struct(...
                                 'algorithm',{{'nesterov' 'bfgs' 'newton'}},...
                                 'nesterov',struct(...
                                                   'stepsize',{{{'numeric'} {'scalar','>',0}}}),...
                                 'bfgs',struct(...
                                               'init_alpha',{{{'numeric'} {'scalar','>',0}}},...
                                               'tol_obj',{{{'numeric'} {'scalar','>',0}}},...
                                               'tol_grad',{{{'numeric'} {'scalar','>',0}}},...
                                               'tol_param',{{{'numeric'} {'scalar','>',0}}}),...
                                 'iter',{{{'numeric'} {'scalar','>',0}}},...
                                 'save_iterations',{{{'logical'} {'scalar'}}});

         params.diagnose = struct(...
                                 'test','gradient');
         valid.diagnose = struct(...
                                 'test',{{{'gradient'}}});

         params.id = 1; % 0 doesnot work as default
         valid.id = {{'numeric'} {'scalar','>',0}};
         params.data = struct('file','');
         valid.data = struct('file',@isstr);
         params.init = 2;
         valid.init = {{'numeric' 'char'} {'nonempty'}}; % shitty validator
         params.random = struct('seed',-1);
         valid.random = struct('seed',{{{'numeric'} {'scalar'}}});

         params.output = struct(...
                                'file','samples.csv',...
                                'append_sample',false,...
                                'diagnostic_file','',...
                                'append_diagnostic',false,...
                                'refresh',100);
         valid.output = struct(...
                                'file',@isstr,...
                                'append_sample',{{{'logical'} {'scalar'}}},...
                                'diagnostic_file',@isstr,...
                                'append_diagnostic',{{{'logical'} {'scalar'}}},...
                                'refresh',{{{'numeric'} {'scalar','>',0}}});
      end
      
      function count = writeTextFile(filename,contents)
         fid = fopen(filename,'w');
         if fid ~= -1
            count = fprintf(fid,'%s\n',contents{:});
            fclose(fid);
         else
            error('Cannot open file to write');
         end
      end
   end
end

% Generate command string from parameter structure. Very inefficient...
% root = 'sample' 'optimize' or 'diagnose'
% return a containers.Map?
function str = parseParams(s,root)
   branch = {'sample' 'optimize' 'diagnose' 'static' 'nuts' 'nesterov' 'bfgs'};
   if nargin == 2
      branch = branch(~strcmp(branch,root));
      fn = fieldnames(s);
      d = intersect(fn,branch);
      s = rmfield(s,d);
   end

   fn = fieldnames(s);
   val = '';
   str = {};
   for i = 1:numel(fn)
      try
         if isstruct(s.(fn{i}))
            % If any of the fieldnames match the *previous* value, assume the
            % previous value is a selector from amongst the fielnames, and
            % delete the other branches
            if any(strcmp(fieldnames(s),val))
               root = val;
               branch = branch(~strcmp(branch,root));
               d = intersect(fieldnames(s),branch);
               s = rmfield(s,d);

               str2 = parseParams(s.(root));
               s = rmfield(s,root);
               str = cat(1,str,str2);
            else
               if ~strcmp(fn{i},val)
                  str = cat(1,str,{sprintf('%s ',fn{i})});
                  %fprintf('%s \\\n',fn{i});
               end
               str2 = parseParams(s.(fn{i}));
               str = cat(1,str,str2);
            end
         else
            val = s.(fn{i});
            if isnumeric(val) || islogical(val)
               val = num2str(val);
            end
            str = cat(1,str,{sprintf('%s=%s ',fn{i},val)});
            %fprintf('%s=%s \\\n',fn{i},val);
         end
      catch
         % We trimmed a branch,
         %fprintf('dropping\n')
      end
   end
end
